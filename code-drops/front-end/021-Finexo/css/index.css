*{
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  text-decoration: none;
  list-style: none;
}

a,span,i{
  color: white;
}

body{
  background-color: white;
}
section.hero_area{
  position: relative;
  /* 要注意，如果没写高度的话，它的高度就是根据正常文档流中的子元素的内来渲染的，会把padding，border算进去，但是如果子元素已经脱离了文档流，比如这里的背景图片，就不会影响父元素的高度了 */
}
section.hero_area .bg-box {
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: -1;
}
section.hero_area .bg-box img {
  width: 100%;
  /* height: 100%;  /*这时候如果写死了height，就会导致被剪切，图片容器的height定下来了，是hero的height：100%。 */
  /* 有趣的是，如果box写的是max-height的话，即使这里写了height：100%，图片的高度也不会被裁剪，而是能够溢出，这是因为，height是最强约束，说了是多少就是多少，但是max-height只是一个建议，也就是，你最好不要超过这么多，如果要超过，也不拦你 */
  object-fit: cover;/*一开始没有给img固定宽高就直接让它cover，死活不生效，因为fit的前提是图片本身有宽高限制，而不是说自动适应父元素，唉，我就说调了半天咋都解决不了把父元素撑大的问题，原来关键点在这！*/
}
/* 这里有一个很有意思的点就是：我虽然给width和height都设置了100%，但是只有width的100%对这个图片的裁剪生效了，你可以看到，其实bg-box和hero-area的高度是没有背景图片那么高的，也就是说，图片超过父元素高度了。是因为：body的默认宽度就是100vw，而body（其他类似块）的高度如果没有事先声明的话，就是代表根据内容高度而定，所以这里的100%其实没啥限制 */

nav.navbar{
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 10px 30px;
}

.nav-left span{
  font-size: 32px;
  font-family: 'Work Sans',sans-serif;
  font-weight: 600;
}

.nav-right{
  display: flex;
  gap: 20px;
  text-transform: uppercase;
  align-items: center;
}
.nav-right li.bars {
  display: none;
}


a.nav-link{
  padding: 5px 8px;
  color: white;
  font-size: 20px;
  font-family: 'Work Sans',sans-serif;
  transition: color 0.2s;
  white-space: nowrap;/*页面收缩的时候也不换行*/
  transition: color 0.2s;
}
a.nav-link:hover i {
  transition: color 0.2s;
}
a.nav-link:hover,a.nav-link:hover i{
  color: rgb(  0,187,240);
}
li.bars a i {
  transition: color 0.2s;
}
li.bars a:hover i {
  color: rgb(0,187,240);
}


/*slide-section*/

.slider_section {
  position: relative;
  /*让switch定位*/
}

input[type='radio'] {
  display: none;
}

.switch{
  display: flex;
  gap: 10px;
  position: absolute;/*这里脱离了正常文档流，所以就好像被嵌在tracker-container里面了，其实他们是兄弟关系*/
  bottom: 1rem;
  left: 50%;
  /* 如果你没写 top / left / right / bottom，它虽然脱离文档流了，但位置其实还是“视觉上原来的位置”； */
  transform: translate(-50%,0);
}

.switch label{
  width: 12px;
  height: 12px;
  background-color: white;
  border-radius: 50%;
  cursor: pointer;
  transition: transform 0.2s;
}

/* 滑动式轨道经典flex写法 */
div.track-container{
  width: 100%;
  overflow-x: hidden;
}

div.track{
  min-width: 300%;/*在flex等的弹性盒子中，如果子元素要的空间超过父元素，最好写min或者加上shrink：0，不然可能会被压缩到内容宽度，虽然现在*/
  display: flex;
}

div.page{
  width: 34%;
  /* display: flex; */
  transition: transform 0.8s;
  padding: 50px;
  /* height:500px 这个高度写死会导致后面响应式布局的一行变两行无法自动撑开高度，一定要删掉*/
  /* position: relative; */
  display: grid;
  grid-template-columns: repeat(2,50%);
}


.page .info{
  flex: 1;
  color: white;
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.page .info h1 {
  font-size: 48px;
  text-transform: uppercase;
  font-family: 'Open Sans',sans-serif;
  min-width: 300px;
}
.page .info p {
  font-size: 14px;
  font-family: 'Open Sans',sans-serif;
  min-width: 300px;

}
.page .info a{
  width: 200px;
  padding: 10px 40px;
  text-align: center;
  background-color: rgb(  0,187,240);
  transition: background 0.2s;
  margin-top: 20px;

}
.page .info a:hover{
  background-color: rgb(  0,127,164);
}
.page .img-box{
  flex: 1;
}

.page .img-box img{
  width: 100%;
  height: 100%;
  object-fit: contain;
  animation: subtleFloat 5s ease infinite;
}

#page-1:checked ~ .track-container .track .page{
  transform: translateX(0);
}
#page-2:checked ~ .track-container .track .page{
  transform: translateX(-100%);
}
#page-3:checked ~ .track-container .track .page{
  transform: translateX(-200%);
}

#page-1:checked ~ .switch label[for='page-1'] {
  transform: scale(1.5);
  background-color: rgb(  0,187,240);
}
#page-2:checked ~ .switch label[for='page-2'] {
  transform: scale(1.5);
  background-color: rgb(  0,187,240);
}
#page-3:checked ~ .switch label[for='page-3'] {
  transform: scale(1.5);
  background-color: rgb(  0,187,240);
}

@keyframes subtleFloat {
  0%{
    transform: translate(0%,-30px);
  }
  /* 浏览器在渲染动画前，就已经把要动的部分搬到了第0帧的位置，所以不用担心第一帧和初识位置不同会造成闪现的效果，相反，如果把第一帧设置成初始位置，如果开启了循环且没有安排好循环往复的运动轨迹的话，还容易出现闪现瞬移的不美观效果 */
  50%{
    transform: translate(0%,30px);
  }
  100%{
    transform: translate(0%,-30px);
  }
}




/*service_section*/

section.service{
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 3rem;
  /* 这里用flex布局和grid布局都没什么关系，实现视觉上面的响应式主要看bpdy部分的grid布局，这里只要不写死宽高就行了 */
  color: black;
  /* display: grid;
  grid-template-rows: repeat(3,auto); */
  /* gap: 5rem; */
  /* 这里千万要注意啊，千万不能用%，因为如果用了%的话，父元素高度不会被撑开，但是这个间隙又是真的存在，就会出现看上去溢出的问题 */
  /* 只有能解析出确定物理尺寸的 gap 单位（如 px、rem、em），才会参与父元素高度计算。而 % 是相对容器宽度来的，不适用于竖直方向的高度推导，因此“不会撑开”父元素。 这是GRT的解释，怎么说呢，长记性就好了*/
  margin: 400px 20px 0;
  padding:20px;
  
}
section.service p,
section.service a {
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
}
section.service h3 {
  white-space: nowrap;
}
section.service .service-body a {
  font-weight: 500;
  padding: 10px 40px;
  transition: color 0.2s;
  color: black;
}
section.service a:hover {
  color: rgb(  0,187,240);
}

.service-head{
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.service-head h2 {
  font-size: 32px;
  font-family: 'Open Sans',sans-serif;
}

.service-head span{
  color: rgb(  0,187,240);
}
.service-body h3 {
  font-size: 20px;
  font-family: 'Open Sans',sans-serif;
}


.service-body{
  /* display: flex;
  gap: 20px; */
  width: 100%;/*如果这里没有设置宽度的话，就默认是卡片撑开的内容宽度，因为竖直方向有个flex布局*/
  display: grid;
  gap: 5rem;
  grid-template-columns: repeat(auto-fit,minmax(250px,1fr));
  grid-template-rows: auto;
  grid-auto-rows: auto;
  justify-content: center;
  height: fit-content;
  /* justify-items: center;这里没有生效是因为card默认是占满轨道的？所以根本没有空间留给他选择。默认占满的原因是它里面的文字太长了，你可以试试把文字删掉，因为文字默认是一行显示的，这里换行了说明宽度不够，只是撑满了网格轨道而已 */
  /* 所以啊，fr和子元素在网格里面对齐这个点还是冲突的，在fr的情况下使用对齐，那个元素就会收缩到内容区域，而不是根据fr来多占空间 */
}

.service-body .card{
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  background-color: rgb(248,248,249);
  padding: 25px 20px;
  border-radius: 4px;
  align-items: center;
}
.service-body .card .img-card{
  width: 80px;
  height: 80px;
}

/* .service .service-foot {
  justify-self: center;
} 这是在service使用grid布局的时候让button水平居中的方法 */

.service .service-foot a {
  padding: 10px 40px;
  background-color: rgb(  0,187,240);
  transition: background 0.2s;
  color: white;
}
.service .service-foot a:hover {
  background-color: rgb(  0,127,164);
  color: white;
}

/*about_section*/

.about {
  color: white;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  background-color: rgb(  0, 32, 74);
  padding: 90px 10px;
  margin-top: 10rem;
}
.about p {
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
}
.about .about-head p {
  width: 75%;
  text-align: center;
}
.about h2 {
  font-size: 32px;
  font-family: 'Open Sans',sans-serif;
}
.about h3 {
  font-size: 28px;
  font-family: 'Open Sans',sans-serif;
}

.about-head {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
}



.about-body {
  /* display: flex;
  height: 350px; */
  display: grid;
  grid-template-columns: repeat(2,50%);
}




.about-body figure img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.about-intro {
  padding: 30px 20px;
  display: flex;
  flex-shrink: 0;
  flex-direction: column;
  gap: 5%;
  justify-content: center;
  align-items: start;
}

.about a{
  padding: 10px 40px;
  border: none;
  background-color: rgb(  0,187,240);
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
  transition: background 0.2s;
}
.about a:hover{
  background-color: rgb(  0,127,164);
}

.about p,.about h3,.about h2 {
  color: white;
}


/*why section*/

section.why {
  color: black;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 50px;
}
section.why h2 {
  font-size: 32px;
  font-family: 'Open Sans',sans-serif;
}
section.why h2 span {
  color: rgb(  0,187,240);
}
section.why h3 {
  font-size: 20px;
  font-family: 'Open Sans',sans-serif;
}
section.why p {
  min-width: 550px;
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
}
section.why a {
  padding: 10px 40px;
  border: none;
  background-color: rgb(  0,187,240);
  transition: background 0.2s;
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
}
section.why a:hover {
  background-color: rgb(  0,127,164);
}
.super-card{
  display: flex;
  padding: 30px 80px;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.why figure{
  border: 4px solid black;
  border-radius: 50%;
  width: 120px;
  height: 120px;
  padding: 10px;
  box-sizing: content-box;
  display: flex;
  justify-content: center;
  align-items: center;
}
.why figure img {
  width: 80%;
  height: 80%;
  object-fit: contain;
  object-position: center;
}


/*team_section*/

section.team {
  color: white;
  display: flex;
  flex-direction: column;
  gap: 20px;
  align-items: center;
  background-color: rgb(  0, 32, 74);
  padding: 50px 30px 80px;
  margin-top: 80px;
}
section.team h2 {
  font-size: 32px;
  font-family: 'Open Sans',sans-serif;
}
section.team h2 span {
  color: rgb(  0,187,240);
}
section.team h5 {
  font-size: 20px;
  font-family: 'Open Sans',sans-serif;
  color: rgb(  0,187,240);
  margin-bottom: 8px;

}
section.team p {
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
  margin-bottom: 30px;
}


section.team .member{
  width: 100%;
  /* display: flex;
  gap:35px; */
  display: grid;
  grid-template-columns: repeat(auto-fit,minmax(280px,1fr));
  gap: 20px;
}



.member-card {
  padding: 30px 0 15px;
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: rgb(  0, 40, 92);
  white-space: nowrap;
}
.member-card figure {
  height: 120px;
  width: 120px;
  border-radius: 50%;
  border: 4px solid white;
  margin-bottom: 20px;
}
.member-card figure img {
  height: 100%;
  width: 100%;
  border-radius: 50%;
  object-position: center;
  object-fit: cover;
}

div.contact {
  /* display: flex;
  gap: 20px; */
  width: 80%;
  display: grid;
  grid-template-columns: repeat(5,20%);/*这里因为考虑到要居中对齐，所以最好不要使用fr单位，因为用了fr单位就不能实现在宽度里面对其了，因为一旦对其就会自动收缩到内容宽度*/
  justify-content: center;
  justify-items: center;
  /* 这里的link标签不用加gap还能实现间隙丝滑过度的秘密就在于这个20%和对齐上面,目前还是有点小迷惑的，有时候用fr吧，就不能对齐了，因为会导致子项所占宽度自动收缩（也就是内容宽度），但是这里又不会，emmm，还是%保险？ */
}
div.contact a i{
  color: white;
  transition: color 0.2s;
  font-size: 1.5em;
}
div.contact a:hover i{
  color: rgb(  0,187,240);
}

/*customer section*/

section.customer {
  color: black;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 80px;
}
.customer h2 {
  font-size: 32px;
  font-family: 'Open Sans',sans-serif;
}
.customer h2 span {
  color: rgb(  0,187,240);
}
.customer h5 {
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
  font-weight: 500;
  margin: 80px 0 6px;
}
.customer p:nth-of-type(1) {
  font-size: 14px;
  font-family: 'Open Sans',sans-serif;
  margin-bottom: 12px;
}
.customer p:nth-of-type(2) {
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
}
.customer input[type='radio'] {
  display: none;
}
.customer-track-container {
  width: 100%;
  overflow: hidden;
  margin-top: 40px;
}
.customer-track {
  width: 200%;
  display: flex;
}
.customer-page {
  width: 50%;
  display: flex;
  padding: 50px 50px;
  justify-content: space-around;
  transition: transform 0.4s ease;
}

.customer-card {
  box-shadow: 0 0 10px rgba(0,0,0,0.2);
  width: 500px;
  height: 250px;
  display: flex;
  flex-direction: column;
  padding: 0 20px;
  position: relative;
}
.customer-card img {
  height: 100px;
  width: 100px;
  border-radius: 50%;
  position: absolute;
  top: -20%;
  left: 5%;
  z-index: 1;
  object-fit: cover;
  object-position: center;
}


.customer-card i {
  color: black;
  position: absolute;
  right: 3%;
  top: 33%;
}
.customer-switch {
  display: flex;
}
.customer-switch span{
  display: inline-block;
  width: 55px;
  height: 55px;
  border: none;
  background-color: white;
  box-shadow: 0 0 4px rgba(0,0,0,0.3);
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
}
.customer-switch span i {
  color: black;
  font-size: 18px;
}
#tab-1:checked ~ .customer-track-container .customer-track .customer-page {
  transform: translate(0%,0%);
}
#tab-2:checked ~ .customer-track-container .customer-track .customer-page {
  transform: translate(-100%,0%);
}

/* section_footer */

footer.footer {
  /* display: flex; */
  padding: 40px;
  background-color: rgb(  0, 32, 74);
  /* justify-content: space-between; */
  margin-top: 100px;
  display: grid;
  grid-template-columns: repeat(4,25%);

  
}


footer.footer h3 {
  font-size: 24px;
  font-family: 'Open Sans',sans-serif;
  margin-bottom: 20px;
  font-weight: 500;
  font-style: normal;
  color: white;
}

/* .footer address,
.footer .info ,
.footer .links,
.footer .subscribe {
  flex: 1;
} */

.footer address {
  display: flex;
  flex-direction: column;
}
.footer address .contact-box {
  display: flex;
  flex-direction: column;
  margin-bottom: 1rem;
}
.footer address .contact-box a {
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
  font-style: normal;
  margin-bottom: 5px;
  display: flex;
  gap: 10px;
  align-items: center;
}
.footer address .social-link {
  display: flex;
  gap: 20px;
}
.footer address .social-link i {
  font-size: 24px;
  transition: color 0.2s;
}
.footer address .social-link i:hover {
  color: rgb(  0,187,240);
}

/* .footer .info {
  width: 250px;
  height: 250px;
} */
.footer .info p {
  width: 80%;
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
  color: white;
}
.footer .links {
  display: flex;
  flex-direction: column;
}
.footer .links a {
  font-size: 16px;
  font-family: 'Open Sans',sans-serif;
  margin-bottom: 10px;
  transition: color 0.2s;
}
.footer .links a:hover {
  color: rgb(  0,187,240);
}


.footer .subscribe {
  display: flex;
  flex-direction: column;
  align-items: start;
}

.footer .subscribe .input {
  display: flex;
  flex-direction: column;
  width: 100%;
}

.footer .subscribe input[type='text'] {
  border: none;
  background-color: transparent;
  color: white;
  height: 35px;
  font-size: 16px;
  position: relative;
}
/* 自闭和标签不能产生伪元素，好家伙，在img和input这俩上踩坑了 */

.footer .subscribe input[type='text']::placeholder {
  font-size: 18px;
  color: white;
}
.footer .subscribe input[type='text']:focus {
  outline: none;
}
.subscribe hr {
  width: 100%;
  border: none;
  height: 1px;
  background-color: white;
  margin-bottom: 20px;
}

.footer .subscribe a {
  padding: 10px 0;
  width: 100%;
  text-align: center;
  background-color: rgb(  0,187,240);
  transition: background 0.2s;
}

.footer .subscribe a:hover {
background-color: rgb(  0,127,164);
}







/* section_footer end */

section.comment {
  display: flex;
  justify-content: center;
  padding: 30px 0;
}
section.comment p {
  font-family: 'Open Sans',sans-serif;
}


